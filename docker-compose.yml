
services:
  frontend:
    container_name: frontend
    build: ./services/frontend
    restart: on-failure
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./services/frontend:/frontend
    networks:
      - transcendence_nw

  user_management:
    container_name: user_management
    build: ./services/backend/user_management
    restart: on-failure
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./services/user_management:/user_management
    networks:
      - transcendence_nw


  nginx:
    container_name: nginx
    build: ./services/nginx
    restart: on-failure
    depends_on:
      database:
        condition: service_healthy
      user_management:
        condition: service_started
      frontend:
        condition: service_started
    ports:
      - "8000:443"
    networks:
      - transcendence_nw
  

  database:
    image: postgres
    container_name: postgresql
    restart: on-failure
    environment:
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_USER: postgres_user
      POSTGRES_NAME: postgresql
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_user"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
    - transcendence_nw

networks:
  transcendence_nw:
    driver: bridge

volumes:
  pgdata: